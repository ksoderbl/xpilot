# $Id: Makefile.std,v 3.15 1993/10/24 12:22:01 bert Exp $
#
# XPilot, a multiplayer gravity war game.  Copyright (C) 1993 by
#
#      Bjørn Stabell        (bjoerns@staff.cs.uit.no)
#      Ken Ronny Schouten   (kenrsc@stud.cs.uit.no)
#      Bert Gÿsbers         (bert@mc.bio.uva.nl)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#
# Set the version number here so that we can we use it when installing
# the binaries in the destination directory.
#
VERSION=3.0.6

# Change these for your site
INSTALLDIR=/usr/local/games
# Last slash important on LIBDIR (and on MAPDIR) !!
LIBDIR=/usr/local/games/lib/xpilot/
SOUNDSDIR=/usr/local/lib/sounds
LOCALGURU=xpilot@cs.uit.no
MANDIR=/usr/local/man/man6

#
# Generic flags.  Probably won't work.  Use one of the specifics below.
#
CC = gcc
CFLAGS = $(DEFS) $(INCS) -O -I/usr/local/X11/include
MLIB = -lm
XLIB = -L/usr/local/X11/lib -lX11

#
# Flags for Apollo's running Domain/OS 10.4 and using Apollo's C compiler 6.9.
# Note that you MUST specify `-W0,-natural' to the Apollo C compiler.
# Boy, how that cost me a LOT of trouble to discover (Bert Gÿsbers).
# Apollo's don't need any of the normal system libraries as they are shared :)
#
APOLLO_CC = cc
APOLLO_CFLAGS = $(DEFS) $(INCS) -D_APOLLO_SOURCE -D_MATH_BUILTINS -W0,-natural -A cpu,mathlib
APOLLO_OPT = -O
APOLLO_DEBUG = -g
APOLLO_MLIB =
APOLLO_XLIB =

#
# Flags for the HP Precision Architecture using the native HP compiler.
# We don't use +w1 as the source contains too much to complain about. :-/
#
HPPA_CC = cc
HPPA_CPLUS = g++
HPPA_CFLAGS = $(DEFS) $(INCS) -Aa -D_HPUX_SOURCE +ESlit +w2 -z -I/usr/include/X11R5
HPPA_OPT = +O3 +OS
#HPPA_OPT =
HPPA_DEBUG = -g
HPPA_PROF = -G
HPPA_PLUS = $(DEFS) $(INCS) -x c++ -O2 -I/usr/include/X11R5
HPPA_LPLUS = $(DEFS) $(INCS) -O2
HPPA_XLIB = -L/usr/lib/X11R5 -lX11
HPPA_MLIB = -lM

#
# Flags for Sun with GCC.
#
# For Solaris 2.1 the following flags were used instead:
#   SUN_CFLAGS = $(DEFS) $(INCS) -DSVR4 -I/usr/openwin/include
#   SUN_MLIB = -lm -lsocket -lnsl -lkrb
#

SUN_CC = gcc
SUN_CFLAGS = $(DEFS) $(INCS)
SUN_OPT = -O
SUN_DEBUG = -g
SUN_MLIB = -lm
SUN_XLIB = -lX11

#
# Flags for Sun CMW with GCC.
#
SUNCMW_CC = gcc
SUNCMW_CFLAGS = $(DEFS) -DSUNCMW $(INCS) -I/usr/openwin/include -I/apps/include
SUNCMW_OPT = -O2
SUNCMW_DEBUG = -g
SUNCMW_MLIB = -lm -lcmw
SUNCMW_XLIB = -L/usr/openwin/lib -lX11

#
# Flags to use with SGI boxes.
# 
SGI_CC = cc
SGI_CFLAGS = $(DEFS) $(INCS) -xansi -prototypes -D__STDC__
SGI_OPT = -O2
SGI_PROF = 
SGI_XLIB = -lX11
SGI_MLIB = -lm -lsun

#
# Flags for AIX on a 3090 Mainframe
#
AIX_CC = cc
AIX_CFLAGS = -DAIX $(DEFS) $(INCS)
AIX_OPT = -O -Hfsingle -w
AIX_DEBUG = -g
AIX_MLIB = -lm
AIX_XLIB = -lX11

#
# Flags for Linux on a 486.
# Linux versions up to 0.99pl9 should define LINUX when compiling
# as there are some network deficiences which are reportedly solved
# in 0.99pl10.  Defining LINUX makes it impossible for a Linux client
# to join a non-Linux server due to different (smaller) packet sizes.
#
LINUX_CC = gcc
LINUX_CPLUSPLUS = g++
LINUX_CFLAGS = $(DEFS) $(INCS) -O2 -m486
LINUX_OPT = -W -Wstrict-prototypes
LINUX_DEBUG = -W -Wstrict-prototypes -g
LINUX_PROF = -pg
LINUX_CHECKER = -checker
LINUX_LCHECKER = $(LINUX_CFLAGS) -checker /usr/lib/libchecker.o
LINUX_PLUS = -g -x c++
LINUX_LPLUS = $(LINUX_CFLAGS)
LINUX_MLIB = -lm
LINUX_XLIB = -lX11

#
# Flags for Sony NEWS.
# 
SONYNEWS_CC = gcc
SONYNEWS_CFLAGS = $(DEFS) -D_SONYNEWS_SOURCE
SONYNEWS_OPT = -O
SONYNEWS_DEBUG = -g
SONYNEWS_MLIB = -lm
SONYNEWS_XLIB = -lX11

#
# Flags for DEC Ultrix 4.2
#
ULTRIX_CC = gcc
ULTRIX_CFLAGS = $(DEFS) $(INCS) -I/usr/include/mit
ULTRIX_OPT = -O
ULTRIX_DEBUG = -g
ULTRIX_MLIB = -lm
ULTRIX_XLIB = -lX11-mit


#
# DEFS should be used for program specific defines.
# Currently supported flags are:
#
#  LIMIT_ACCESS    - extremely local, cannot be used without modification.
#  LOG             - try to log every server start
#  TURN_THRUST     - makes turning drain fuel and gives you a nice spark...
#  CHEAT           - define this for fun, but don't make it a habit... :)
#  SILENT          - makes the server real silent.
#  SOUND           - for sound support (requires rplay 3.0 or NCDaudio)
#
# You should also set these appropriately (see config.h):
#
#  LOCALGURU           - define to the person in charge of xpilot on this site.
#  LIBDIR              - define to where you want the help-files etc.
#                        (HELPFILE, MOTDFILE, LOGFILE and MAPDIR)
#  UPDATES_PR_FRAME=1  - number of 'ticks' per drawing (1 is default).
#
DEFS = -DLOCALGURU=\\\"$(LOCALGURU)\\\" -DLIBDIR=\\\"$(LIBDIR)\\\"

INCS = $(AUDIOINC)

#
# For NCDaudio support, uncomment the following lines in addition to adding
# -DSOUND to the DEFS line above
#
#AUDIOINC = -I/usr/local/include
#AUDIOLIB = -L/usr/local/lib -laudio
#AUDIOSRC = ncdaudio.c
#AUDIOOBJ = ncdaudio.o

#
# For rplay support, uncomment the following lines in addition to adding
# -DSOUND to the DEFS line above
#
#AUDIOINC = -I/usr/local/include
#AUDIOLIB = -L/usr/local/lib -lrplay
#AUDIOSRC = rplayaudio.c
#AUDIOOBJ = rplayaudio.o

#
# Uncomment this line if your system doesn't have usleep().
# Note that systems that do have usleep may want to use this
# version too, because it may be faster :-)
#
USLEEP_OBJ = usleep.o

#
# Uncomment this line if you don't have strcasecmp() (case insensitive compare)
#
#STRCASECMP_OBJ = strcasecmp.o

#
# Uncomment this line if your system doesn't have strdup().
# Ultrix, AIX and Sequent need it.
#
#STRDUP_OBJ = strdup.o

#
# Uncomment this line if your system is Trusted Solaris CMW 1.0
# You also need to #define SUNCMW
#
#SUNCMW_OBJ = cmw.o

#
# Server program, xpilots...
#
OBJS1 = server.o event.o map.o math.o cmdline.o net.o netserver.o \
        play.o player.o rules.o update.o collision.o error.o frame.o \
        robot.o option.o socklib.o timer.o saudio.o \
        $(USLEEP_OBJ) $(STRCASECMP_OBJ) $(STRDUP_OBJ) $(SUNCMW_OBJ)
SRCS1 = server.c event.c map.c math.c cmdline.c net.c netserver.c \
        play.c player.c rules.c update.c collision.c error.c frame.c \
        robot.c option.c socklib.c timer.c saudio.c

#
# Client program, xpilot...
#
OBJS2 = xpilot.o client.o join.o net.o netclient.o paint.o dbuff.o xinit.o \
	default.o math.o xevent.o syslimit.o error.o socklib.o $(USLEEP_OBJ) \
	configure.o widget.o caudio.o $(AUDIOOBJ) $(STRDUP_OBJ)
SRCS2 = xpilot.c client.c join.c net.c netclient.c paint.c dbuff.c xinit.c \
	default.c math.c xevent.c syslimit.c error.c socklib.c caudio.c \
	configure.c widget.c $(AUDIOSRC)

all:
	@echo "Please specify your system (apollo/hppa/sun/suncmw/aix/linux/sonynews/sgi/ultrix)."

apollo:
	@make targets "CC=$(APOLLO_CC)" "CFLAGS=$(APOLLO_CFLAGS) $(APOLLO_OPT)" "MLIB=$(APOLLO_MLIB)" "XLIB=$(APOLLO_XLIB)"

apollo-debug:
	@make targets "CC=$(APOLLO_CC)" "CFLAGS=$(APOLLO_CFLAGS) $(APOLLO_DEBUG)" "MLIB=$(APOLLO_MLIB)" "XLIB=$(APOLLO_XLIB)"

hppa:
	@make targets "CC=$(HPPA_CC)" "CFLAGS=$(HPPA_CFLAGS) $(HPPA_OPT)" "MLIB=$(HPPA_MLIB)" "XLIB=$(HPPA_XLIB)"

hppa-debug:
	@make targets "CC=$(HPPA_CC)" "CFLAGS=$(HPPA_CFLAGS) $(HPPA_DEBUG)" "MLIB=$(HPPA_MLIB)" "XLIB=$(HPPA_XLIB)"

hppa-prof:
	@make targets "CC=$(HPPA_CC)" "CFLAGS=$(HPPA_CFLAGS) $(HPPA_OPT) $(HPPA_PROF)" "MLIB=$(HPPA_MLIB)" "XLIB=$(HPPA_XLIB)"

hppa-plus:
	@make targets "CC=$(HPPA_CPLUS)" "CFLAGS=$(HPPA_PLUS)" "LFLAGS=$(HPPA_LPLUS)" "MLIB=$(HPPA_MLIB)" "XLIB=$(HPPA_XLIB)"

sun:
	@make targets "CC=$(SUN_CC)" "CFLAGS=$(SUN_CFLAGS) $(SUN_OPT)" "MLIB=$(SUN_MLIB)" "XLIB=$(SUN_XLIB)"

sun-debug:
	@make targets "CC=$(SUN_CC)" "CFLAGS=$(SUN_CFLAGS) $(SUN_DEBUG)" "MLIB=$(SUN_MLIB)" "XLIB=$(SUN_XLIB)"

suncmw:
	@make targets "CC=$(SUNCMW_CC)" "CFLAGS=$(SUNCMW_CFLAGS) $(SUNCMW_OPT)" "MLIB=$(SUNCMW_MLIB)" "XLIB=$(SUNCMW_XLIB)"

suncmw-debug:
	@make targets "CC=$(SUNCMW_CC)" "CFLAGS=$(SUNCMW_CFLAGS) $(SUNCMW_DEBUG)" "MLIB=$(SUNCMW_MLIB)" "XLIB=$(SUNCMW_XLIB)"

aix:
	@make xpilots "CC=$(AIX_CC)" "CFLAGS=$(AIX_CFLAGS) $(AIX_OPT)" "MLIB=$(AIX_MLIB)" "XLIB=$(AIX_XLIB)"

linux:
	@make targets "CC=$(LINUX_CC)" "CFLAGS=$(LINUX_CFLAGS) $(LINUX_OPT)" "MLIB=$(LINUX_MLIB)" "XLIB=$(LINUX_XLIB)"

linux-debug:
	@make targets "CC=$(LINUX_CC)" "CFLAGS=$(LINUX_CFLAGS) $(LINUX_DEBUG)" "MLIB=$(LINUX_MLIB)" "XLIB=$(LINUX_XLIB)"

linux-prof:
	@make targets "CC=$(LINUX_CC)" "CFLAGS=$(LINUX_CFLAGS) $(LINUX_PROF)" "MLIB=$(LINUX_MLIB)" "XLIB=$(LINUX_XLIB)"

linux-checker:
	@make targets "CC=$(LINUX_CC)" "CFLAGS=$(LINUX_CFLAGS) $(LINUX_CHECKER)" "LFLAGS=$(LINUX_LCHECKER)" "MLIB=$(LINUX_MLIB)" "XLIB=$(LINUX_XLIB)"
  
linux-plus:
	@make targets "CC=$(LINUX_CPLUSPLUS)" "CFLAGS=$(LINUX_CFLAGS) $(LINUX_PLUS)" "LFLAGS=$(LINUX_LPLUS)" "MLIB=$(LINUX_MLIB)" "XLIB=$(LINUX_XLIB)"

sonynews:
	@make targets "CC=$(SONYNEWS_CC)" "CFLAGS=$(SONYNEWS_CFLAGS) $(SONYNEWS_OPT)" "MLIB=$(SONYNEWS_MLIB)" "XLIB=$(SONYNEWS_XLIB)"

sonynews-debug:
	@make targets "CC=$(SONYNEWS_CC)" "CFLAGS=$(SONYNEWS_CFLAGS) $(SONYNEWS_DEBUG)" "MLIB=$(SONYNEWS_MLIB)" "XLIB=$(SONYNEWS_XLIB)"

sgi:
	@make targets "CC=$(SGI_CC)" "CFLAGS=$(SGI_CFLAGS) $(SGI_OPT)" "MLIB=$(SGI_MLIB)" "XLIB=$(SGI_XLIB)"

sgi-debug:
	@make targets "CC=$(SGI_CC)" "CFLAGS=$(SGI_CFLAGS) $(SGI_DEBUG)" "MLIB=$(SGI_MLIB)" "XLIB=$(SGI_XLIB)"

ultrix:
	@make targets "CC=$(ULTRIX_CC)" "CFLAGS=$(ULTRIX_CFLAGS) $(ULTRIX_OPT)" "MLIB=$(ULTRIX_MLIB)" "XLIB=$(ULTRIX_XLIB)"

ultrix-debug:
	@make targets "CC=$(ULTRIX_CC)" "CFLAGS=$(ULTRIX_CFLAGS) $(ULTRIX_DEBUG)" "MLIB=$(ULTRIX_MLIB)" "XLIB=$(ULTRIX_XLIB)"

#
# If LFLAGS is specified on the command line then
# that will override the following default.
# CFLAGS will be defined by the command line arguments
# of the recursive make.
#
LFLAGS=$(CFLAGS)

targets: xpilot xpilots

xpilots: $(OBJS1)
	rm -f xpilots
	$(CC) $(LFLAGS) -o $@ $(OBJS1) $(MLIB)

xpilot: $(OBJS2)
	rm -f xpilot
	$(CC) $(LFLAGS) -o $@ $(OBJS2) $(AUDIOLIB) $(XLIB) $(MLIB)

install:
	@echo "Specify either install-apollo, install-hppa or install-sun or install-sonynews or install-suncmw"

install-apollo: apollo
	cp xpilot $(INSTALLDIR)/xpilot-$(VERSION).apollo
	cp xpilots $(INSTALLDIR)/xpilots-$(VERSION).apollo

install-apollo-backup:
	cp ../ap/xpilot $(INSTALLDIR)/xpilot-$(VERSION).apollo
	cp ../ap/xpilots $(INSTALLDIR)/xpilots-$(VERSION).apollo

install-hppa: hppa
	cp xpilot xpilots $(INSTALLDIR)
	strip $(INSTALLDIR)/xpilot*
	if [ ! -d $(LIBDIR) ]; then mkdir $(LIBDIR); fi
	/bin/rm -f $(LIBDIR)/maps
	cp -r ../lib/defaults ../lib/sounds ../lib/maps $(LIBDIR)
	if [ ! -d $(SOUNDSDIR) ]; then mkdir $(SOUNDSDIR); fi
	cp ../sounds/*.au $(SOUNDSDIR)
	chmod -R a+r $(LIBDIR) $(SOUNDSDIR)
	cp ../man6/*.6 $(MANDIR)
	chmod a+r $(MANDIR)/xpilot*.6

install-hppa-backup:
	cp ../hp/xpilot $(INSTALLDIR)/xpilot-$(VERSION).hppa
	cp ../hp/xpilots $(INSTALLDIR)/xpilots-$(VERSION).hppa

install-sun: sun
	cp xpilot $(INSTALLDIR)/xpilot-$(VERSION).sun
	cp xpilots $(INSTALLDIR)/xpilots-$(VERSION).sun

install-suncmw: sun
	cp xpilot $(INSTALLDIR)/xpilot-$(VERSION).suncmw
	cp xpilots $(INSTALLDIR)/xpilots-$(VERSION).suncmw
	chpriv a=all $(INSTALLDIR)/xpilot-$(VERSION).suncmw
	chpriv f=file_dac_read      $(INSTALLDIR)/xpilot-$(VERSION).suncmw
	chpriv f+file_dac_write     $(INSTALLDIR)/xpilot-$(VERSION).suncmw
	chpriv f+file_downgrade_il  $(INSTALLDIR)/xpilot-$(VERSION).suncmw
	chpriv f+file_mac_read      $(INSTALLDIR)/xpilot-$(VERSION).suncmw
	chpriv f+file_mac_write     $(INSTALLDIR)/xpilot-$(VERSION).suncmw
	chpriv f+file_upgrade_il    $(INSTALLDIR)/xpilot-$(VERSION).suncmw
	chpriv f+net_allowaccess    $(INSTALLDIR)/xpilot-$(VERSION).suncmw
	chpriv f+net_boot           $(INSTALLDIR)/xpilot-$(VERSION).suncmw
	chpriv f+net_broadcast      $(INSTALLDIR)/xpilot-$(VERSION).suncmw
	chpriv f+net_mac_override   $(INSTALLDIR)/xpilot-$(VERSION).suncmw
	chpriv f+win_admin          $(INSTALLDIR)/xpilot-$(VERSION).suncmw
	chpriv a=all $(INSTALLDIR)/xpilots-$(VERSION).suncmw
	chpriv f=file_dac_read      $(INSTALLDIR)/xpilots-$(VERSION).suncmw
	chpriv f+file_dac_write     $(INSTALLDIR)/xpilots-$(VERSION).suncmw
	chpriv f+file_downgrade_il  $(INSTALLDIR)/xpilots-$(VERSION).suncmw
	chpriv f+file_mac_read      $(INSTALLDIR)/xpilots-$(VERSION).suncmw
	chpriv f+file_mac_write     $(INSTALLDIR)/xpilots-$(VERSION).suncmw
	chpriv f+file_upgrade_il    $(INSTALLDIR)/xpilots-$(VERSION).suncmw
	chpriv f+net_allowaccess    $(INSTALLDIR)/xpilots-$(VERSION).suncmw
	chpriv f+net_boot           $(INSTALLDIR)/xpilots-$(VERSION).suncmw
	chpriv f+net_broadcast      $(INSTALLDIR)/xpilots-$(VERSION).suncmw
	chpriv f+net_mac_override   $(INSTALLDIR)/xpilots-$(VERSION).suncmw

install-sonynews: sonynews
	cp xpilot $(INSTALLDIR)/xpilot-$(VERSION).sonynews
	cp xpilots $(INSTALLDIR)/xpilots-$(VERSION).sonynews

install-sgi: sgi
	cp xpilot $(INSTALLDIR)/xpilot-$(VERSION).sgi
	cp xpilots $(INSTALLDIR)/xpilots-$(VERSION).sgi

install-ultrix: ultrix
	cp xpilot $(INSTALLDIR)/xpilot-$(VERSION).ultrix
	cp xpilots $(INSTALLDIR)/xpilots-$(VERSION).ultrix


install-apollo-debug: apollo-debug install-apollo

install-hppa-debug: hppa-debug install-hppa

install-sun-debug: sun-debug install-sun

install-sonynews-debug: sonynews-debug install-sonynews

install-sgi-debug: sgi-debug install-sgi

install-ultrix-debug: ultrix-debug install-ultrix

backup-apollo:
	rm -f ../ap/*.o ../ap/xpilot ../ap/xpilots
	mv *.o xpilot xpilots ../ap/.

backup-hppa:
	rm -f ../hp/*.o ../hp/xpilot ../hp/xpilots
	mv *.o xpilot xpilots ../hp/.

restore-apollo:
	rm -f *.o xpilot xpilots
	mv ../ap/*.o ../ap/xpilot ../ap/xpilots .

restore-hppa:
	rm -f *.o xpilot xpilots
	mv ../hp/*.o ../hp/xpilot ../hp/xpilots .

# usleep.o strcasecmp.o and strdup.o declared here in case they are
# commented out for another platform

clean:
	rm -f $(OBJS1) $(OBJS2) usleep.o strcasecmp.o strdup.o xpilot xpilots core

ctags:
	ctags *.h *.c

###
caudio.o : caudio.c 
client.o : client.c version.h client.h const.h types.h keys.h dbuff.h setup.h \
  error.h rules.h bit.h netclient.h paint.h xinit.h 
cmdline.o : cmdline.c global.h config.h types.h rules.h object.h const.h bit.h \
  keys.h map.h item.h draw.h version.h proto.h error.h robot.h defaults.h 
cmw.o : cmw.c 
collision.o : collision.c global.h config.h types.h rules.h object.h const.h \
  bit.h keys.h map.h item.h draw.h version.h proto.h error.h score.h robot.h saudio.h \
  netserver.h 
configure.o : configure.c version.h client.h const.h types.h keys.h dbuff.h \
  paint.h draw.h xinit.h bit.h netclient.h widget.h configure.h setup.h error.h 
dbuff.o : dbuff.c client.h const.h types.h keys.h dbuff.h draw.h bit.h 
default.o : default.c types.h version.h config.h const.h client.h keys.h dbuff.h \
  paint.h draw.h pack.h socklib.h bit.h netclient.h xinit.h error.h 
error.o : error.c error.h 
event.o : event.c global.h config.h types.h rules.h object.h const.h bit.h keys.h \
  map.h item.h draw.h version.h proto.h error.h score.h robot.h saudio.h netserver.h 
frame.o : frame.c global.h config.h types.h rules.h object.h const.h bit.h keys.h \
  map.h item.h draw.h version.h proto.h error.h netserver.h saudio.h 
join.o : join.c types.h version.h error.h client.h const.h keys.h dbuff.h netclient.h 
map.o : map.c global.h config.h types.h rules.h object.h const.h bit.h keys.h \
  map.h item.h draw.h version.h proto.h error.h 
math.o : math.c config.h types.h rules.h object.h const.h bit.h keys.h map.h \
  item.h draw.h proto.h error.h 
ncdaudio.o : ncdaudio.c 
net.o : net.c version.h error.h net.h socklib.h const.h packet.h bit.h 
netclient.o : netclient.c types.h version.h error.h net.h socklib.h const.h \
  netclient.h setup.h packet.h bit.h paint.h dbuff.h keys.h client.h xinit.h pack.h \
  draw.h 
netserver.o : netserver.c types.h global.h config.h rules.h object.h const.h \
  bit.h keys.h map.h item.h draw.h version.h proto.h error.h pack.h socklib.h \
  net.h netserver.h packet.h setup.h robot.h saudio.h 
option.o : option.c types.h global.h config.h rules.h object.h const.h bit.h \
  keys.h map.h item.h draw.h version.h proto.h error.h robot.h defaults.h 
paint.o : paint.c version.h client.h const.h types.h keys.h dbuff.h error.h \
  draw.h item.h paint.h xinit.h setup.h rules.h bit.h net.h socklib.h netclient.h 
play.o : play.c global.h config.h types.h rules.h object.h const.h bit.h keys.h \
  map.h item.h draw.h version.h proto.h error.h score.h robot.h saudio.h netserver.h 
player.o : player.c global.h config.h types.h rules.h object.h const.h bit.h \
  keys.h map.h item.h draw.h version.h proto.h error.h score.h robot.h netserver.h 
robot.o : robot.c global.h config.h types.h rules.h object.h const.h bit.h keys.h \
  map.h item.h draw.h version.h proto.h error.h score.h robot.h saudio.h netserver.h 
rules.o : rules.c global.h config.h types.h rules.h object.h const.h bit.h keys.h \
  map.h item.h draw.h version.h proto.h error.h 
saudio.o : saudio.c global.h config.h types.h rules.h object.h const.h bit.h \
  keys.h map.h item.h draw.h version.h proto.h error.h netserver.h 
server.o : server.c types.h config.h global.h rules.h object.h const.h bit.h \
  keys.h map.h item.h draw.h version.h proto.h error.h socklib.h pack.h robot.h \
  saudio.h net.h netserver.h 
socklib.o : socklib.c socklib.h error.h types.h 
strcasecmp.o : strcasecmp.c 
strdup.o : strdup.c 
syslimit.o : syslimit.c 
timer.o : timer.c types.h error.h 
update.o : update.c global.h config.h types.h rules.h object.h const.h bit.h \
  keys.h map.h item.h draw.h version.h proto.h error.h score.h robot.h saudio.h 
usleep.o : usleep.c types.h 
widget.o : widget.c version.h client.h const.h types.h keys.h dbuff.h paint.h \
  draw.h xinit.h bit.h error.h widget.h 
xevent.o : xevent.c client.h const.h types.h keys.h dbuff.h paint.h xinit.h \
  draw.h bit.h setup.h netclient.h widget.h error.h 
xinit.o : xinit.c version.h const.h rules.h draw.h types.h icon.h client.h keys.h \
  dbuff.h paint.h xinit.h bit.h setup.h widget.h configure.h error.h netclient.h \
  item.h items/itemRocketPack.xbm items/itemCloakingDevice.xbm items/itemEnergyPack.xbm \
  items/itemWideangleShot.xbm items/itemRearShot.xbm items/itemMinePack.xbm items/itemSensorPack.xbm \
  items/itemTank.xbm items/itemEcm.xbm items/itemAfterburner.xbm items/itemTransporter.xbm \
  items/itemLaser.xbm 
xpilot.o : xpilot.c version.h config.h types.h pack.h socklib.h const.h bit.h \
  error.h net.h 
