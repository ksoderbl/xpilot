/* $Id: Imakefile,v 3.18 1993/12/23 12:39:45 bert Exp $
 *
 * XPilot, a multiplayer gravity war game.  Copyright (C) 1993 by
 *
 *      Bjørn Stabell        (bjoerns@staff.cs.uit.no)
 *      Ken Ronny Schouten   (kenrsc@stud.cs.uit.no)
 *      Bert Gÿsbers         (bert@mc.bio.uva.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#
# Imakefile - XPilot
#

INSTALLDIR = /usr/local/games

/*
 * DEFS should be used for program specific defines.
 * Currently supported flags are:
 *
 *  LIMIT_ACCESS    		- extremely local,
 *				  cannot be used without modification.
 *  LOG				- try to log every server start
 *  TURN_THRUST			- makes turning drain fuel and gives
 *				  you a nice spark...
 *  CHEAT			- define this for fun,
 *				  but don't make it a habit... :)
 *  SILENT			- makes the server real silent.
 *  ERASE			- use a different, possible faster, frame
 *				  drawing technique which is not perfect yet.
 *				  It needs more work by a volunteer.
 *  SPARC_CMAP_HACK		- try the alternate colormap swapping code
 *				  that talks directly to the sparc hardware
 *				  WARNING: WILL NOT WORK ON ANY OTHER HARDWARE
 *				  CAUTION: dangerous if you don't know
 *				  what it does and how it works.
 *				  It needs more work by a volunteer.
 *
 * You should also set these appropriately (see config.h):
 *
 *  LOCALGURU			- define to the person in charge
 *				  of xpilot on this site.
 *  LIBDIR			- define to where you want the help-files etc.
 *				  (HELPFILE, MOTDFILE, LOGFILE and MAPDIR)
 *  UPDATES_PR_FRAME=1		- number of 'ticks' per drawing (1 is default).
 *
 */
DEFS = -DLOCALGURU=\"xpilot@cs.uit.no\" -DLIBDIR=\"/usr/local/games/lib/xpilot/\"


/*
 * Imake should specify the right CC if set up reasonably, but if that does
 * not work, try one of these:
 *
 * If you are still unsuccessful, try modifying and using Makefile.orig
 * insted of this file.
 */
/* CC = cc -Aa -D_HPUX_SOURCE	/* HPUX */
/* CC = gcc			/* SUNs with gcc */
/* CC = acc -fast		/* SUNs with acc */
/* CC = cc			/* SGI Indigo (see CCOPTIONS below!) */
/* CC = cc -std1 -non_shared	/* DEC/OSF1 V1.2 */
/* CC = c89			/* DEC/ULTRIX 4.2 with c89 compiler kit */
/* CC = gcc -D__STDC__		/* DEC/ULTRIX with gcc */
/* CC = gcc			/* 386BSD */
/* CC = cc			/* AIX */
/* CC = cc -Xa			/* Sequent's ANSI cc (Dynix/PTX 2 and up) */
/* CC = CC -D_HPUX_SOURCE -D__STDC__	/* HP (USG) C++ - too strict yet */
/*
 * People with ULTRIX having problems or solutions should
 * contact David Chatterton at: davidc@bruce.cs.monash.edu.au
 */


/*
 * CDEBUGFLAGS should specify optimalization or debug information (or both).
 * Try not defining anything first.
 */
/* CDEBUGFLAGS = -g				/* General debug flag */
/* CDEBUGFLAGS = -O				/* General optimize flag */
/* CDEBUGFLAGS = +O3 +OS +ESlit			/* HPUX cc optimize flags */
/* CDEBUGFLAGS = -g -z +w1			/* HPUX cc debug flags */
/* CDEBUGFLAGS = -g2 -O2			/* SGI debug */
/* CDEBUGFLAGS = -O2				/* SGI optimize */
/* CDEBUGFLAGS = -O -Hfsingle -w		/* AIX on a 3090 Mainframe */
/* CDEBUGFLAGS = -O2 -fstrength-reduce		/* gcc optimize flags */
/* CDEBUGFLAGS = -Wc,-O3			/* Dynix/PTX 2 flags */


/*
 * If you're using Solaris CMW, you'll have to use Makefile.std or
 * tweak the Imakefile.  If you add support for CMW in the Imakefile,
 * drop us a mail, eh? :)
 */

/*
 * For sound support, you must uncomment either one of these
 * following lines and customize the paths
 */
/* #define NCD_SOUND			/* Uncomment for NCD sound support */
NCDAUDIOINC = -I/usr/local/include
NCDAUDIOLIB = -L/usr/local/lib -laudio

/* #define RPLAY_SOUND			/* Uncomment for rplay sound support */
RPLAYAUDIOINC = -I/usr/local/include
RPLAYAUDIOLIB = -L/usr/local/lib -lrplay


/*
 * Miscellaneous.
 * SGI users must select their CCOPTIONS here.
 */
USLEEP_OBJ = usleep.o			/* Uncomment if you lack usleep() */
/* STRDUP_OBJ = strdup.o		/* Uncomment if you lack strdup() */
/* STRCASECMP_OBJ = strcasecmp.o	/* Uncomment if you lack strcasecmp()*/
/* CCOPTIONS = -I/usr/local/include	/* You might need this one */
/* CCOPTIONS = -xansi -prototypes -D__STDC__	/* For SGI (needed!) SGI */

/* TOP_INCLUDES =			/* Sun users with GCC need this */
/* EXTRALIB = -ldnet_stub		/* DEC/OSF1 DECnet library required */
/* EXTRALIB =				/* normal */



############### DO NOT TOUCH ANYTHING BELOW THIS LINE #####################

/*
 * Sound part
 */
#if defined(NCD_SOUND)
  AUDIOINC = $(NCDAUDIOINC)
  AUDIOLIB = $(NCDAUDIOLIB)
  AUDIOSRC = ncdaudio.c
  AUDIOOBJ = ncdaudio.o
  DEFINES = $(DEFS) -DSOUND
#else
#if defined(RPLAY_SOUND)
  AUDIOINC = $(RPLAYAUDIOINC)
  AUDIOLIB = $(RPLAYAUDIOLIB)
  AUDIOSRC = rplayaudio.c
  AUDIOOBJ = rplayaudio.o
  DEFINES = $(DEFS) -DSOUND
#else
  AUDIOINC =
  AUDIOLIB =
  AUDIOSRC =
  AUDIOOBJ =
  DEFINES = $(DEFS)
#endif
#endif

LOCAL_INCLUDES = $(AUDIOINC)

/*
 * Now DEFINES and LOCAL_INCLUDES should've been set up properly.
 */

MATHLIB = -lm

#
# 'Server' program, xpilots, object and source files
#
OBJS1 = server.o event.o map.o math.o cmdline.o net.o netserver.o \
        play.o player.o rules.o update.o collision.o error.o frame.o \
        robot.o option.o socklib.o timer.o saudio.o \
        $(USLEEP_OBJ) $(STRCASECMP_OBJ) $(STRDUP_OBJ)
SRCS1 = server.c event.c map.c math.c cmdline.c net.c netserver.c \
        play.c player.c rules.c update.c collision.c error.c frame.c \
        robot.c option.c socklib.c timer.c saudio.c
#
# Client program, xpilot...
#
OBJS2 = xpilot.o client.o join.o net.o netclient.o paint.o dbuff.o xinit.o \
        default.o math.o xevent.o syslimit.o error.o socklib.o caudio.o \
	widget.o configure.o $(USLEEP_OBJ) $(AUDIOOBJ) $(STRDUP_OBJ)
SRCS2 = xpilot.c client.c join.c net.c netclient.c paint.c dbuff.c xinit.c \
        default.c math.c xevent.c syslimit.c error.c socklib.c caudio.c \
	widget.c configure.c $(AUDIOSRC)

#
# Make handshake and server program
#
# Select one of the next two lines:
#AllTarget(xpilot xpilots)
PROGRAMS = xpilot xpilots

ComplexProgramTarget_1(xpilots, $(AUDIOLIB), $(MATHLIB) $(EXTRALIB))
ComplexProgramTarget_2(xpilot,  $(AUDIOLIB), $(MATHLIB) $(EXTRALIB) $(XLIB))

#
# Special rules
#
etags::
	etags -t *.[chips]

# Last line?
